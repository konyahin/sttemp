#!/usr/bin/env sh

set -eu

ask () {
	echo "Enter $1:" >&2
	read -r value
    echo "$value"
}

fill_vars () {
	vars=$(envsubst -v "$(cat "$TEMPL")")

	for var in $vars
	do
		[ -z "$(printenv "$var")" ] &&
			value="$(ask "$var")" &&
			eval "export $var=\"$value\""
	done
}

print_templ () {
	envsubst <"$TEMPL"
}

print_help () {
	cat <<EOF
sttemp - simple template manager
Usage:
	-h      Print this help
	-l      Print list of all templates
	-v name Print all variables from template
	-d dir  Set directory with templates.
	name    Fill shell-like variables in template file and print his content. Missing environment variable will be asked on stderr.
EOF
	exit
}

[ "$#" -lt 1 ] && print_help

while [ "$#" -gt 0 ]; do
	case "$1" in
		-h)
			HELP=YES
			shift
			;;
		-l)
			LIST_TEMPL=YES
			shift
			;;
		-v)
			PRINT_VAR=YES
			shift
			;;
		-d)
			TEMPL_DIR="$2"
			shift 2
			;;
		*)
			TEMPL_NAME="$1"
			shift
			;;
	esac
done

[ -n "${HELP:-}" ] && print_help

[ -z "${TEMPL_DIR:-}" ] &&
	TEMPL_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/sttemp" &&
	mkdir -p "$TEMPL_DIR"

[ -n "${LIST_TEMPL:-}" ] &&
	ls "$TEMPL_DIR" &&
	exit

[ -z "${TEMPL_NAME:-}" ] &&
	echo "You should specify template name" &&
	exit 1

TEMPL="$TEMPL_DIR/$TEMPL_NAME"

[ ! -f "$TEMPL" ] &&
	echo "Template $TEMPL_NAME doesn't exist in $TEMPL_DIR" >&2 &&
	exit 1

[ -n "${PRINT_VAR:-}" ] &&
    envsubst -v "$(cat "$TEMPL")" &&
    exit

[ -n "${STTEMP_ASK:-}" ] && eval "$STTEMP_ASK"
fill_vars
print_templ
